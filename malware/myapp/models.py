from django.db import models

# Create your models here.
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin

class CustomUserManager(BaseUserManager):
    def create_user(self, username, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('role', 'admin')
        return self.create_user(username, email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    username = models.CharField(max_length=50, unique=True)
    email = models.EmailField(max_length=100, unique=True)
    password_hash = models.CharField(max_length=255)  # Django handles password hashing internally
    role = models.CharField(max_length=10, choices=[('admin', 'Admin'), ('analyst', 'Analyst'), ('viewer', 'Viewer')])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    def __str__(self):
        return self.email
    
    class Meta:
        db_table = 'customuser'
    


from django.conf import settings
from django.db import models

class UploadedFile(models.Model):
    # Define choices for the threat_level field
    THREAT_LEVEL_CHOICES = [
        ('safe', 'Safe'),
        ('suspicious', 'Suspicious'),
        ('harmful', 'Harmful'),
    ]

    # Fields
    file = models.FileField(upload_to='uploads/')
    file_name = models.CharField(max_length=255)
    file_size = models.IntegerField()
    uploaded_at = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  # Use settings.AUTH_USER_MODEL
    threat_level = models.CharField(max_length=20, choices=THREAT_LEVEL_CHOICES, default='safe')

    def __str__(self):
        return self.file_name

    class Meta:
        db_table = 'uploadedfile'
    
from django.db import models

class FileAnalysis(models.Model):
    file_name = models.CharField(max_length=255)
    file_type = models.CharField(max_length=50)
    analysis_result = models.CharField(max_length=50)  # e.g., 'safe', 'harmful'
    analysis_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.file_name
    
    class Meta:
        db_table = 'fileanalysis'

class ThreatIntelligence(models.Model):
    threat_type = models.CharField(max_length=255)
    description = models.TextField()
    detected_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.threat_type
    
    class Meta:
        db_table = 'threatintelligence'

class UserActivityLog(models.Model):
    user = models.CharField(max_length=255)
    activity = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user} - {self.activity}"
    
    class Meta:
        db_table = 'useractivitylog'
    

class File(models.Model):
    file_name = models.CharField(max_length=255)  # Ensure this matches your database
    file_size = models.IntegerField()
    status = models.CharField(max_length=50)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.file_name
    
    class Meta:
        db_table = 'file'


from django.conf import settings
from django.db import models

class Project(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='projects')
    name = models.CharField(max_length=255)
    description = models.TextField()
    start_date = models.DateField()
    end_date = models.DateField()
    status = models.CharField(max_length=50)
    priority = models.CharField(max_length=50)
    team_members = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='team_projects')

    def __str__(self):
        return self.name
    
    class Meta:
        db_table = 'projects'