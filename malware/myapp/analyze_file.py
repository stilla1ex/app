import re
import mmap
from typing import List

def analyze_file(file_path: str) -> str:
    """
    Analyze a file for potential threats using static analysis.
    :param file_path: Path to the file to analyze.
    :return: Threat level ('safe', 'suspicious', 'harmful').
    """
    # Known malicious patterns (e.g., suspicious strings or code snippets)
    malicious_patterns = [
        b'eval\(', b'exec\(', b'system\(', b'shell_exec\(', b'base64_decode\(',
        b'powershell', b'cmd.exe', b'wscript.shell', b'chr\(', b'fromCharCode\(',
        b'stratum', b'cryptonight', b'http://', b'https://', b'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
    ]

    # Suspicious file extensions
    suspicious_extensions = ['.exe', '.dll', '.bat', '.vbs', '.js', '.php', '.py', '.sh']

    # Read the file content using memory-mapped files for efficiency
    with open(file_path, 'rb') as f:
        with mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as mm:
            content = mm.read()

    # Check for malicious patterns
    for pattern in malicious_patterns:
        if re.search(pattern, content):
            return 'harmful'

    # Check for suspicious file extensions
    if any(file_path.endswith(ext) for ext in suspicious_extensions):
        return 'suspicious'

    # Default to safe if no threats are detected
    return 'safe'

