from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate
from django.contrib.auth.decorators import login_required
from .forms import RegistrationForm, LoginForm, FileUploadForm, UpdateAccountForm
from django.shortcuts import get_object_or_404, redirect
from django.contrib import messages
from django.core.paginator import Paginator
import requests
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle
from django.http import HttpResponse
from django.conf import settings
from .models import UploadedFile, FileAnalysis, ThreatIntelligence, UserActivityLog, File
from django.db.models import Count
from django.http import JsonResponse, HttpResponse
from .analyze_file import analyze_file
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle
from io import BytesIO
from .forms import ProjectForm
from .models import Project


def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.set_password(form.cleaned_data['password1']) 
            user.save()
            return redirect('login')
    else:
        form = RegistrationForm()
    return render(request, 'register.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            email = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(request, email=email, password=password)
            if user is not None:
                login(request, user)
                return redirect('dashboard')  # Redirect to a home page or dashboard
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})

def update_account(request):
    return render(request, 'update_account.html')


@login_required
def dashboard(request):
    # Fetch data for the cards
    all_files = UploadedFile.objects.filter(user=request.user).count() 
    high_threat_files = UploadedFile.objects.filter(threat_level='harmful', user=request.user).count()  # High threat files
    medium_threat_files = UploadedFile.objects.filter(threat_level='medium', user=request.user).count()  # Medium threat files
    safe_files = UploadedFile.objects.filter(threat_level='safe', user=request.user).count()  # Safe files

    # Fetch data for the rest of the dashboard
    malware_detections = FileAnalysis.objects.filter(analysis_result='harmful').count()
    system_vulnerabilities = ThreatIntelligence.objects.count()
    recent_alerts = ThreatIntelligence.objects.order_by('-detected_at')[:5]
    user_activity_logs = UserActivityLog.objects.order_by('-timestamp')[:5]

    # Fetch data for charts
    malware_data = FileAnalysis.objects.filter(analysis_result='harmful').values('analysis_date').annotate(count=Count('id'))
    traffic_data = ThreatIntelligence.objects.values('detected_at').annotate(count=Count('id'))

    # Pass all data to the template context
    context = {
        'all_files': all_files,
        'high_threat_files': high_threat_files,
        'medium_threat_files': medium_threat_files,
        'safe_files': safe_files,
        'malware_detections': malware_detections,
        'system_vulnerabilities': system_vulnerabilities,
        'recent_alerts': recent_alerts,
        'user_activity_logs': user_activity_logs,
        'malware_data': list(malware_data),
        'traffic_data': list(traffic_data),
    }

    return render(request, 'dashboard.html', context)


@login_required
def upload_files(request):
    if request.method == 'POST':
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = form.save(commit=False)
            uploaded_file.file_name = uploaded_file.file.name
            uploaded_file.file_size = uploaded_file.file.size
            uploaded_file.user = request.user  # Associate the file with the current user
            uploaded_file.save()
            
            messages.success(request, 'File uploaded successfully!')

            try:
                threat_level = analyze_file(uploaded_file.file.path)
                uploaded_file.threat_level = threat_level
                uploaded_file.save()
            except FileNotFoundError as e:
                print(f"Error analyzing file: {e}")
                uploaded_file.threat_level = 'pending'
                uploaded_file.save()

            return redirect('upload_files')
    else:
        form = FileUploadForm()

    recent_files = UploadedFile.objects.filter(user=request.user).order_by('-uploaded_at')
    paginator = Paginator(recent_files, 5)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'upload_files.html', {
        'form': form,
        'page_obj': page_obj,
    })


# All files view
@login_required
def all_files(request):
    recent_files = UploadedFile.objects.filter(user=request.user).order_by('-uploaded_at')
    paginator = Paginator(recent_files, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
    }

    return render(request, 'all_files.html', context)



# Delete files
@login_required
def delete_file(request, file_id):
    if request.method == 'POST':
        file = get_object_or_404(UploadedFile, id=file_id, user=request.user)  # Ensure the user owns the file
        file.delete()
    return redirect('all_files')

@login_required
def delete_recent(request, file_id):
    if request.method == 'POST':
        file = get_object_or_404(UploadedFile, id=file_id)  
        file.delete()
    return redirect('recent_analysis')

@login_required
def delete_harmful(request, file_id):
    if request.method == 'POST':
        file = get_object_or_404(UploadedFile, id=file_id)  # Change 'File' to 'UploadedFile'
        file.delete()
    return redirect('harmful')

@login_required
def delete_safe(request, file_id):
    if request.method == 'POST':
        file = get_object_or_404(UploadedFile, id=file_id)  # Change 'File' to 'UploadedFile'
        file.delete()
        messages.success(request, 'File deleted successfully.')
    return redirect('safe')

# Analysis view
@login_required
def analysis(request):
    # Fetch all files from the database
    files = UploadedFile.objects.all()

    context = {
        'files': files,
    }
    return render(request, 'analysis.html', context)

#Harmful filles view
@login_required
def harmful(request):
    harmful_files = UploadedFile.objects.filter(threat_level='harmful', user=request.user).order_by('-uploaded_at')
    paginator = Paginator(harmful_files, 5)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'harmful_files': harmful_files,
        'page_obj': page_obj,
    }
    return render(request, 'harmful.html', context)

    
# Safe files view
@login_required
def safe(request):
    # Fetch files marked as "harmful"
    safe_files = UploadedFile.objects.filter(threat_level='safe', user=request.user)

        # Paginate the files (10 per page)
    paginator = Paginator(safe_files, 5)  # Show 10 files per page
    page_number = request.GET.get('page')  # Get the current page number from the URL
    page_obj = paginator.get_page(page_number)  # Get the current page object

    context = {
        'safe_files': safe_files,
        'page_obj': page_obj, 
    }
    return render(request, 'safe.html', context)

@login_required
def recent_analysis(request):
    # Fetch all recently analyzed files ordered by upload time
    recent_files_list = UploadedFile.objects.filter(user=request.user).order_by('-uploaded_at')
    
    # Paginate the results (e.g., 10 files per page)
    paginator = Paginator(recent_files_list, 10)
    
    # Get the current page number from the request's GET parameters
    page_number = request.GET.get('page')
    
    # Get the page object for the current page
    recent_files = paginator.get_page(page_number)
    
    return render(request, 'recent_analysis.html', {'recent_files': recent_files})

@login_required
def analyse_file(request, file_id):
    # Fetch the file by ID
    file = get_object_or_404(UploadedFile, id=file_id, user=request.user)

    # Analyze the file
    threat_level = analyze_file(file.file.path)

    # Update the file's threat level in the database
    file.threat_level = threat_level
    file.save()

    # Generate a downloadable PDF report if requested
    if request.GET.get('download') == 'true':
        buffer = BytesIO()
        pdf = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()

        # Content for the PDF
        content = []

        # Add a title
        title = Paragraph("File Analysis Report", styles['Title'])
        content.append(title)

        # Add file details
        file_details = [
            ["File Name", file.file_name],
            ["Size", f"{file.file_size / 1024:.1f} KB"],
            ["Status", file.get_threat_level_display()],
            ["Uploaded At", file.uploaded_at.strftime("%b. %d, %Y, %I:%M %p")],
        ]
        file_table = Table(file_details, colWidths=[200, 300])
        file_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        content.append(file_table)

        # Add analysis results
        analysis_title = Paragraph("Analysis Results", styles['Heading2'])
        content.append(analysis_title)

        analysis_details = [
            ["Threat Level", threat_level],
        ]
        analysis_table = Table(analysis_details, colWidths=[200, 300])
        analysis_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        content.append(analysis_table)

        analysis_result = analyze_file(file)  # Your analysis logic here
        file.threat_level = analysis_result['threat_level']
        file.save()


        # Add recommendations
        recommendations_title = Paragraph("Recommendations", styles['Heading2'])
        content.append(recommendations_title)

        recommendations = []
        if threat_level == 'safe':
            recommendations = [
                "Ensure regular updates of security tools.",
                "Maintain a secure backup of critical files.",
                "Monitor logs for any unusual activity.",
            ]
        elif threat_level == 'suspicious':
            recommendations = [
                "Run an in-depth static and dynamic analysis.",
                "Block execution on production systems until further review.",
                "Utilize a sandbox for behavioral monitoring.",
            ]
        elif threat_level == 'harmful':
            recommendations = [
                "Immediately quarantine or delete the file.",
                "Alert the cybersecurity team and conduct forensic analysis.",
                "Apply patches and security updates if exploitation is possible.",
                "Review system logs for related suspicious activity.",
            ]

        recommendations_table = Table([[r] for r in recommendations], colWidths=[500])
        recommendations_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        content.append(recommendations_table)

        # Build the PDF
        pdf.build(content)

        # Prepare the HTTP response with the PDF file
        buffer.seek(0)
        response = HttpResponse(buffer, content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="{file.file_name}_analysis_report.pdf"'
        return response

    # Render the analysis page
    context = {
        'file': file,
        'threat_level': threat_level,
    }
    return render(request, 'analyse_file.html', context)

# Project views
@login_required
def projects(request):
    if request.method == 'POST':
        form = ProjectForm(request.POST)
        if form.is_valid():
            project = form.save(commit=False)
            project.user = request.user  # Associate the project with the current user
            project.save()
            form.save_m2m()  # Save many-to-many data for the form (e.g., team_members)
            return redirect('projects')  # Redirect to the projects page after saving
    else:
        form = ProjectForm()
    
    # Fetch all projects for the current user
    projects = Project.objects.filter(user=request.user)
    return render(request, 'projects.html', {'form': form, 'projects': projects})


from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib import messages  # Import the messages framework
from .forms import UpdateAccountForm

@login_required
def update_account(request):
    user = request.user  # Get the currently logged-in user
    
    if request.method == 'POST':
        form = UpdateAccountForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            messages.success(request, 'Your account has been updated successfully!')  # Add success message
            # Do not redirect here; render the template instead
            return render(request, 'update_account.html', {'form': form})
    else:
        form = UpdateAccountForm(instance=user)
    
    return render(request, 'update_account.html', {'form': form})